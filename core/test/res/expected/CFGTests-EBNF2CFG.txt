V = {<arguments>, <body>, <expression>, <factor>, <function>, <if>, <program>, <return>, <statement>, <term>}
T = {!, (, ), *, +, ,, -, /, ;, <, =, >, else, expression>, fn, identifier, if, literal, return, then, {, }}
P = {
  <arguments> ::= identifier|identifier , <arguments>
  <body> ::= <statement>|<statement> <body>
  <expression> ::= <term>|<term> ! = <expression>|<term> + <expression>|<term> - <expression>|<term> < = <expression>|<term> < expression>|<term> = = <expression>|<term> > <expression>|<term> > = <expression>
  <factor> ::= ( <expression> )|identifier|literal
  <function> ::= fn identifier ( <arguments> ) { <body> }
  <if> ::= if <expression> then <statement>|if <expression> then <statement> else <statement>
  <program> ::= <function>|<function> <program>
  <return> ::= return <expression> ;
  <statement> ::= <if>|<return>
  <term> ::= <factor>|<factor> * <term>|<factor> / <term>
}
S = <program>
