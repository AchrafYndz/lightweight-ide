V = {<arguments>, <assignment>, <body>, <call_arguments>, <expression>, <factor>, <function>, <function_call>, <if>, <program>, <return>, <statement>, <term>, <while>}
T = {!, (, ), *, +, ,, -, /, ;, <, =, >, else, fn, identifier, if, let, literal, return, while, {, }}
P = {
  <arguments> ::= identifier|identifier , <arguments>
  <assignment> ::= identifier = <expression> ;|let identifier = <expression> ;
  <body> ::= <statement>|<statement> <body>
  <call_arguments> ::= <expression>|<expression> , <call_arguments>
  <expression> ::= <expression> ! = <term>|<expression> + <term>|<expression> - <term>|<expression> < <term>|<expression> < = <term>|<expression> = = <term>|<expression> > <term>|<expression> > = <term>|<term>
  <factor> ::= ! ( <expression> )|( <expression> )|- <factor>|<function_call>|identifier|literal
  <function> ::= fn identifier ( ) { <body> }|fn identifier ( ) { }|fn identifier ( <arguments> ) { <body> }
  <function_call> ::= identifier ( )|identifier ( <call_arguments> )
  <if> ::= if <expression> { <body> }|if <expression> { <body> } else { <body> }
  <program> ::= <function>|<function> <program>
  <return> ::= return <expression> ;
  <statement> ::= <assignment>|<function_call> ;|<if>|<return>|<while>
  <term> ::= <factor>|<term> * <factor>|<term> / <factor>
  <while> ::= while <expression> { <body> }
}
S = <program>
